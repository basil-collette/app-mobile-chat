#
# INDEX ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

- 1/ BDD
    - a) création
- 2/ API
    - a) Fixtures
    - b) Lancement
- 3/ MOBILE APP
    - a) Prérequis
    - b) Lancement
- 4/ WEB PANEL ADMIN
    - a) Lancement
- 5/ BONUS

# -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

1/ BDD :
    a) Création :
        Le script de création de base se situe à la racine, il est nommé "restore_bdd_chappy.sql".

2/ API :
    a) Fixtures :
        Dans le dossier "api-app-mobile-chat", executer la commande suivante : npm run load-fixtures
        Une dizaine de compte User seront générés dont un admin (mail : "admin@gmail.com", password : "password") et un user (mail : "user@gmail.com", password : "password").
    b) Lancement :
        Pour lancer le serveur, dans le dossier "api-app-mobile-chat", executer la commande suivante : node server.js

3/ MOBILE APP :
    a) Prérequis
        Dans le dossier "client-app-mobile-chat", et le fichier ".env", inscrire l'adresse IP de la machine à l'attribut "ENDPOINT_API".
    b) Lancement :
        Pour lancer l'execution expo, dans le dossier "client-app-mobile-chat", executer la commande suivante : npx expo start

4/ WEB PANEL ADMIN :
    a) Lancement :
        Pour lancer le serveur web, dans le dossier "client-admin-app-mobile-chat", executer la commande suivante : npm start
        utiliser le compte admin pour se connecter (mail : "admin@gmail.com", password : "password")

5/ BONUS :
    - L'application se nomme Happy-Chat / Chappy, elle permet le filtrage des insultes. Dans une interface de discution, les insultes connues de la base de données
    sont remplacées par des mots phonétiquement ressemblant et politiquement corrects. pour ce faire, à la racine se trouve un dossier "chappy-filter", on y trouve
    un fichier texte contenant une banque d'insulte, un fichier texte contenant la plus part des mots de la langue française et un fichier "writeTranslatedFile.js".
    A l'execution de ce dernier, les insutes du fichier "insultes.txt" sont retirées du fichier "liste_francais.txt", puis est créé un fichier "translate.csv" dans
    ce même repertoire. grace à un algoritme contenu dans le fichier "writeTranslatedFile.js", un mot de la langue francaise est attribué à chaque insulte sur base
    de leur ressemblance phonétique. Le fichier "translate.csv" contiendra alors une liste d'association id/insulte/traduction pouvant être insérée dans la base de
    donnée.
    - Il est possible de voir les personnes connectées dans la liste des users (dont l'icone est alors verte) grace à l'usage interne des socket.
    - Les erreurs sont pour la plus part gérées par l'appli en prévenant les crash.
    - Un système de stack de toaster est utilisé pour les validations, info et les erreurs.

# --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Projet réalisé par Chris BRIERRE et Basil COLLETTE dans le cadre d'un enseignement à l'école La Plateforme, en 2023.

# FIN -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------